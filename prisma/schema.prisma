// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  notes         Note[]
  folders       Folder[]
  analytics     Analytics[]

  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Blog Posts
model Post {
  id            String   @id @default(cuid())
  title         String
  slug          String   @unique
  content       String
  excerpt       String?
  featuredImage String?
  published     Boolean  @default(false)
  publishedAt   DateTime?
  authorId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags   Tag[]

  @@map("posts")
}

// Projects Portfolio
model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String?
  githubUrl   String?
  liveUrl     String?
  featured    Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  technologies Technology[]

  @@map("projects")
}

// Personal Notes (Private)
model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  folderId  String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  folder Folder? @relation(fields: [folderId], references: [id], onDelete: SetNull)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags   Tag[]

  @@map("notes")
}

// Folders for organizing notes
model Folder {
  id       String   @id @default(cuid())
  name     String
  color    String   @default("#3B82F6")
  parentId String?
  userId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  parent   Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children Folder[] @relation("FolderHierarchy")
  notes    Note[]
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("folders")
}

// Tags for posts and notes
model Tag {
  id    String @id @default(cuid())
  name  String @unique
  color String @default("#6B7280")

  // Relations
  posts Post[]
  notes Note[]

  @@map("tags")
}

// Technologies for projects
model Technology {
  id   String @id @default(cuid())
  name String @unique
  icon String?

  // Relations
  projects Project[]

  @@map("technologies")
}

// Website Analytics
model Analytics {
  id             String   @id @default(cuid())
  page           String
  views          Int      @default(0)
  uniqueVisitors Int      @default(0)
  date           DateTime @default(now())
  userId         String?

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("analytics")
}

// Contact Form Submissions
model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("contacts")
}

// Enums
enum Role {
  USER
  ADMIN
}
